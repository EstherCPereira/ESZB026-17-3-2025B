#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>


void write_sysfs(const char *path, const char *value) {
   FILE *fp = fopen(path, "w");
   if (fp == NULL) {
       perror("Erro ao abrir o arquivo do GPIO");
       exit(1);
   }
   fputs(value, fp);
   fclose(fp);
}


void export_gpio(int gpio) {
   char buffer[64];
   snprintf(buffer, sizeof(buffer), "%d", gpio);
   write_sysfs("/sys/class/gpio/export", buffer);
}


void unexport_gpio(int gpio) {
   char buffer[64];
   snprintf(buffer, sizeof(buffer), "%d", gpio);
   write_sysfs("/sys/class/gpio/unexport", buffer);
}


void set_direction(int gpio, const char *direction) {
   char path[64];
   snprintf(path, sizeof(path), "/sys/class/gpio/gpio%d/direction", gpio);
   write_sysfs(path, direction);
}


void write_value(int gpio, int value) {
   char path[64];
   char val[2];
   snprintf(path, sizeof(path), "/sys/class/gpio/gpio%d/value", gpio);
   snprintf(val, sizeof(val), "%d", value);
   write_sysfs(path, val);
}


void acender_led(int gpio, int duration) {
   export_gpio(gpio);
   set_direction(gpio, "out");
   write_value(gpio, 1);
   sleep(duration);
   write_value(gpio, 0);
   unexport_gpio(gpio);
}


int main() {
   for (int i = 0; i < 5; i++) {
       // LED vermelho - GPIO 20
       acender_led(20, 2);


       // LED verde - GPIO 21
       acender_led(21, 1);


       // LED amarelo - GPIO 16
       acender_led(16, 1);
   }


   return 0;
}
